/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"

	"github.com/rancher/wrangler/pkg/generic"
	v1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/equality"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	informers "k8s.io/client-go/informers/core/v1"
	clientset "k8s.io/client-go/kubernetes/typed/core/v1"
	listers "k8s.io/client-go/listers/core/v1"
	"k8s.io/client-go/tools/cache"
)

type PodHandler func(string, *v1.Pod) (*v1.Pod, error)

type PodController interface {
	PodClient

	OnChange(ctx context.Context, name string, sync PodHandler)
	OnRemove(ctx context.Context, name string, sync PodHandler)
	Enqueue(namespace, name string)

	Cache() PodCache

	Informer() cache.SharedIndexInformer
	GroupVersionKind() schema.GroupVersionKind

	AddGenericHandler(ctx context.Context, name string, handler generic.Handler)
	AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler)
	Updater() generic.Updater
}

type PodClient interface {
	Create(*v1.Pod) (*v1.Pod, error)
	Update(*v1.Pod) (*v1.Pod, error)
	UpdateStatus(*v1.Pod) (*v1.Pod, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1.Pod, error)
	List(namespace string, opts metav1.ListOptions) (*v1.PodList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Pod, err error)
}

type PodCache interface {
	Get(namespace, name string) (*v1.Pod, error)
	List(namespace string, selector labels.Selector) ([]*v1.Pod, error)

	AddIndexer(indexName string, indexer PodIndexer)
	GetByIndex(indexName, key string) ([]*v1.Pod, error)
}

type PodIndexer func(obj *v1.Pod) ([]string, error)

type podController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.PodsGetter
	informer          informers.PodInformer
	gvk               schema.GroupVersionKind
}

func NewPodController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.PodsGetter, informer informers.PodInformer) PodController {
	return &podController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromPodHandlerToHandler(sync PodHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1.Pod
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1.Pod))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *podController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1.Pod))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdatePodOnChange(updater generic.Updater, handler PodHandler) PodHandler {
	return func(key string, obj *v1.Pod) (*v1.Pod, error) {
		if obj == nil {
			return handler(key, nil)
		}

		copyObj := obj.DeepCopy()
		newObj, err := handler(key, copyObj)
		if newObj != nil {
			copyObj = newObj
		}
		if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
			newObj, err := updater(copyObj)
			if newObj != nil && err == nil {
				copyObj = newObj.(*v1.Pod)
			}
		}

		return copyObj, err
	}
}

func (c *podController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *podController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *podController) OnChange(ctx context.Context, name string, sync PodHandler) {
	c.AddGenericHandler(ctx, name, FromPodHandlerToHandler(sync))
}

func (c *podController) OnRemove(ctx context.Context, name string, sync PodHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromPodHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *podController) Enqueue(namespace, name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), namespace, name)
}

func (c *podController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *podController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *podController) Cache() PodCache {
	return &podCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *podController) Create(obj *v1.Pod) (*v1.Pod, error) {
	return c.clientGetter.Pods(obj.Namespace).Create(obj)
}

func (c *podController) Update(obj *v1.Pod) (*v1.Pod, error) {
	return c.clientGetter.Pods(obj.Namespace).Update(obj)
}

func (c *podController) UpdateStatus(obj *v1.Pod) (*v1.Pod, error) {
	return c.clientGetter.Pods(obj.Namespace).UpdateStatus(obj)
}

func (c *podController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.Pods(namespace).Delete(name, options)
}

func (c *podController) Get(namespace, name string, options metav1.GetOptions) (*v1.Pod, error) {
	return c.clientGetter.Pods(namespace).Get(name, options)
}

func (c *podController) List(namespace string, opts metav1.ListOptions) (*v1.PodList, error) {
	return c.clientGetter.Pods(namespace).List(opts)
}

func (c *podController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.Pods(namespace).Watch(opts)
}

func (c *podController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Pod, err error) {
	return c.clientGetter.Pods(namespace).Patch(name, pt, data, subresources...)
}

type podCache struct {
	lister  listers.PodLister
	indexer cache.Indexer
}

func (c *podCache) Get(namespace, name string) (*v1.Pod, error) {
	return c.lister.Pods(namespace).Get(name)
}

func (c *podCache) List(namespace string, selector labels.Selector) ([]*v1.Pod, error) {
	return c.lister.Pods(namespace).List(selector)
}

func (c *podCache) AddIndexer(indexName string, indexer PodIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1.Pod))
		},
	}))
}

func (c *podCache) GetByIndex(indexName, key string) (result []*v1.Pod, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1.Pod))
	}
	return result, nil
}
