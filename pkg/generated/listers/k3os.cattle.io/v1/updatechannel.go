/*
Copyright 2019 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	v1 "github.com/rancher/k3os/pkg/apis/k3os.cattle.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UpdateChannelLister helps list UpdateChannels.
type UpdateChannelLister interface {
	// List lists all UpdateChannels in the indexer.
	List(selector labels.Selector) (ret []*v1.UpdateChannel, err error)
	// UpdateChannels returns an object that can list and get UpdateChannels.
	UpdateChannels(namespace string) UpdateChannelNamespaceLister
	UpdateChannelListerExpansion
}

// updateChannelLister implements the UpdateChannelLister interface.
type updateChannelLister struct {
	indexer cache.Indexer
}

// NewUpdateChannelLister returns a new UpdateChannelLister.
func NewUpdateChannelLister(indexer cache.Indexer) UpdateChannelLister {
	return &updateChannelLister{indexer: indexer}
}

// List lists all UpdateChannels in the indexer.
func (s *updateChannelLister) List(selector labels.Selector) (ret []*v1.UpdateChannel, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.UpdateChannel))
	})
	return ret, err
}

// UpdateChannels returns an object that can list and get UpdateChannels.
func (s *updateChannelLister) UpdateChannels(namespace string) UpdateChannelNamespaceLister {
	return updateChannelNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UpdateChannelNamespaceLister helps list and get UpdateChannels.
type UpdateChannelNamespaceLister interface {
	// List lists all UpdateChannels in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.UpdateChannel, err error)
	// Get retrieves the UpdateChannel from the indexer for a given namespace and name.
	Get(name string) (*v1.UpdateChannel, error)
	UpdateChannelNamespaceListerExpansion
}

// updateChannelNamespaceLister implements the UpdateChannelNamespaceLister
// interface.
type updateChannelNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UpdateChannels in the indexer for a given namespace.
func (s updateChannelNamespaceLister) List(selector labels.Selector) (ret []*v1.UpdateChannel, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.UpdateChannel))
	})
	return ret, err
}

// Get retrieves the UpdateChannel from the indexer for a given namespace and name.
func (s updateChannelNamespaceLister) Get(name string) (*v1.UpdateChannel, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("updatechannel"), name)
	}
	return obj.(*v1.UpdateChannel), nil
}
